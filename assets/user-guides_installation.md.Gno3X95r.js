import{_ as i,c as a,o as s,ae as t}from"./chunks/framework.Cd-3tpCq.js";const u=JSON.parse('{"title":"Installation Guide","description":"","frontmatter":{},"headers":[],"relativePath":"user-guides/installation.md","filePath":"user-guides/installation.md"}'),n={name:"user-guides/installation.md"};function o(l,e,r,h,p,c){return s(),a("div",null,e[0]||(e[0]=[t(`<h1 id="installation-guide" tabindex="-1">Installation Guide <a class="header-anchor" href="#installation-guide" aria-label="Permalink to &quot;Installation Guide&quot;">​</a></h1><p>This guide will walk you through setting up Open Archiver using Docker Compose. This is the recommended method for deploying the application.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">Docker</a> and <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer">Docker Compose</a> installed on your server or local machine.</li><li>A server or local machine with at least 2GB of RAM.</li><li><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noreferrer">Git</a> installed on your server or local machine.</li></ul><h2 id="_1-clone-the-repository" tabindex="-1">1. Clone the Repository <a class="header-anchor" href="#_1-clone-the-repository" aria-label="Permalink to &quot;1. Clone the Repository&quot;">​</a></h2><p>First, clone the Open Archiver repository to your machine:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/LogicLabs-OU/OpenArchiver.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OpenArchiver</span></span></code></pre></div><h2 id="_2-configure-your-environment" tabindex="-1">2. Configure Your Environment <a class="header-anchor" href="#_2-configure-your-environment" aria-label="Permalink to &quot;2. Configure Your Environment&quot;">​</a></h2><p>The application is configured using environment variables. You&#39;ll need to create a <code>.env</code> file to store your configuration.</p><p>Copy the example environment file for Docker:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example.docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><p>Now, open the <code>.env</code> file in a text editor and customize the settings.</p><h3 id="important-configuration" tabindex="-1">Important Configuration <a class="header-anchor" href="#important-configuration" aria-label="Permalink to &quot;Important Configuration&quot;">​</a></h3><p>You must change the following placeholder values to secure your instance:</p><ul><li><code>POSTGRES_PASSWORD</code>: A strong, unique password for the database.</li><li><code>REDIS_PASSWORD</code>: A strong, unique password for the Valkey/Redis service.</li><li><code>MEILI_MASTER_KEY</code>: A complex key for Meilisearch.</li><li><code>JWT_SECRET</code>: A long, random string for signing authentication tokens.</li><li><code>ADMIN_PASSWORD</code>: A strong password for the initial admin user.</li><li><code>ENCRYPTION_KEY</code>: A 32-byte hex string for encrypting sensitive data in the database. You can generate one with the following command:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rand</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -hex</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span></code></pre></div></li></ul><h3 id="storage-configuration" tabindex="-1">Storage Configuration <a class="header-anchor" href="#storage-configuration" aria-label="Permalink to &quot;Storage Configuration&quot;">​</a></h3><p>By default, the Docker Compose setup uses local filesystem storage, which is persisted using a Docker volume named <code>archiver-data</code>. This is suitable for most use cases.</p><p>If you want to use S3-compatible object storage, change the <code>STORAGE_TYPE</code> to <code>s3</code> and fill in your S3 credentials (<code>STORAGE_S3_*</code> variables).</p><h2 id="_3-run-the-application" tabindex="-1">3. Run the Application <a class="header-anchor" href="#_3-run-the-application" aria-label="Permalink to &quot;3. Run the Application&quot;">​</a></h2><p>Once you have configured your <code>.env</code> file, you can start all the services using Docker Compose:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>This command will:</p><ul><li>Pull the required Docker images for the frontend, backend, database, and other services.</li><li>Create and start the containers in the background (<code>-d</code> flag).</li><li>Create the persistent volumes for your data.</li></ul><p>You can check the status of the running containers with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div><h2 id="_4-access-the-application" tabindex="-1">4. Access the Application <a class="header-anchor" href="#_4-access-the-application" aria-label="Permalink to &quot;4. Access the Application&quot;">​</a></h2><p>Once the services are running, you can access the Open Archiver web interface by navigating to <code>http://localhost:3000</code> in your web browser.</p><p>You can log in with the <code>ADMIN_EMAIL</code> and <code>ADMIN_PASSWORD</code> you configured in your <code>.env</code> file.</p><h2 id="_5-next-steps" tabindex="-1">5. Next Steps <a class="header-anchor" href="#_5-next-steps" aria-label="Permalink to &quot;5. Next Steps&quot;">​</a></h2><p>After successfully deploying and logging into Open Archiver, the next step is to configure your ingestion sources to start archiving emails.</p><ul><li><a href="./email-providers/google-workspace.html">Connecting to Google Workspace</a></li><li><a href="./email-providers/microsoft-365.html">Connecting to Microsoft 365</a></li><li><a href="./email-providers/imap.html">Connecting to a Generic IMAP Server</a></li></ul><h2 id="updating-your-installation" tabindex="-1">Updating Your Installation <a class="header-anchor" href="#updating-your-installation" aria-label="Permalink to &quot;Updating Your Installation&quot;">​</a></h2><p>To update your Open Archiver instance to the latest version, run the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pull the latest changes from the repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pull the latest Docker images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Restart the services with the new images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div>`,34)]))}const g=i(n,[["render",o]]);export{u as __pageData,g as default};
